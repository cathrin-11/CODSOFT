task 3
#include <iostream>
#include <array>
#include <string>

// Define the size of the board
const int BOARD_SIZE = 3;

// Define players' symbols
const char PLAYER_X = 'X';
const char PLAYER_O = 'O';

// Define the type for the game board
using Board = std::array<std::array<char, BOARD_SIZE>, BOARD_SIZE>;

// Function prototypes
void initializeBoard(Board& board);
void displayBoard(const Board& board);
bool makeMove(Board& board, char player, int row, int col);
bool checkWin(const Board& board, char player);
bool checkDraw(const Board& board);
char switchPlayer(char currentPlayer);
bool playAgain();

int main() {
    bool continuePlaying = true;

    while (continuePlaying) {
        // Initialize the board
        Board board;
        initializeBoard(board);

        // Player X starts the game
        char currentPlayer = PLAYER_X;

        bool gameWon = false;
        bool gameDraw = false;

        // Main game loop
        while (!gameWon && !gameDraw) {
            displayBoard(board);

            // Get the player's move
            int row, col;
            std::cout << "Player " << currentPlayer << ", enter your move (row column): ";
            std::cin >> row >> col;

            // Make the move
            if (makeMove(board, currentPlayer, row, col)) {
                // Check for win
                gameWon = checkWin(board, currentPlayer);
                // Check for draw
                gameDraw = checkDraw(board);
                // Switch player for the next turn
                currentPlayer = switchPlayer(currentPlayer);
            } else {
                std::cout << "Invalid move! Try again.\n";
            }
        }

        // Display result
        displayBoard(board);
        if (gameWon) {
            std::cout << "Player " << currentPlayer << " wins!\n";
        } else {
            std::cout << "It's a draw!\n";
        }

        // Ask if players want to play again
        continuePlaying = playAgain();
    }

    std::cout << "Thanks for playing!\n";

    return 0;
}

// Function to initialize the game board
void initializeBoard(Board& board) {
    for (auto& row : board) {
        for (char& cell : row) {
            cell = ' ';
        }
    }
}

// Function to display the game board
void displayBoard(const Board& board) {
    std::cout << "  0 1 2\n";
    for (int i = 0; i < BOARD_SIZE; ++i) {
        std::cout << i << ' ';
        for (int j = 0; j < BOARD_SIZE; ++j) {
            std::cout << board[i][j] << ' ';
        }
        std::cout << '\n';
    }
}

// Function to make a move on the game board
bool makeMove(Board& board, char player, int row, int col) {
    if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE || board[row][col] != ' ') {
        return false;
    }
    board[row][col] = player;
    return true;
}

// Function to check if a player has won
bool checkWin(const Board& board, char player) {
    // Check rows and columns
    for (int i = 0; i < BOARD_SIZE; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
            return true; // Row i
        }
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
            return true; // Column i
        }
    }
    // Check diagonals
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
        return true; // Diagonal \
    }
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
        return true; // Diagonal /
    }
    return false;
}

// Function to check if the game is a draw
bool checkDraw(const Board& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == ' ') {
                return false; // There is an empty cell
            }
        }
    }
    return true; // All cells are filled
}

// Function to switch players
char switchPlayer(char currentPlayer) {
    return (currentPlayer == PLAYER_X) ? PLAYER_O : PLAYER_X;
}

// Function to ask if players want to play again
bool playAgain() {
    std::string response;
    std::cout << "Do you want to play again? (yes/no): ";
    std::cin >> response;
    return (response == "yes" || response == "y");
}
